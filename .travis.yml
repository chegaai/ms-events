os:
  - linux

language: node_js
node_js:
  - "node"

branches:
  except:
    - master
    - release

cache:
  directories:
    - "$HOME/google-cloud-sdk/"

services:
  - docker

env:
  global:
    - GOOGLE_APPLICATION_CREDENTIALS=~/gcloud-service-key.json
    - PROJECT_NAME=nindoo-214818
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1

before_script:
  - chmod +x ./scripts/deploy.sh
  - set -e
  - if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf $HOME/google-cloud-sdk; curl https://sdk.cloud.google.com | bash > /dev/null; fi
  - source /home/travis/google-cloud-sdk/path.bash.inc
  - echo $GCLOUD_SERVICE_KEY | base64 --decode -i > ${HOME}/gcloud-service-key.json # Creates service account credentials
  - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json

before_deploy:
  - gcloud --quiet version
  - gcloud --quiet components update
  - gcloud --quiet components update kubectl # install gcloud sdk
  - gcloud --quiet config set project $PROJECT_NAME # Get K8s Config
  - gcloud --quiet config set container/cluster $CLUSTER_NAME
  - gcloud --quiet config set compute/zone ${CLOUDSDK_COMPUTE_ZONE}
  - gcloud --quiet container clusters get-credentials $CLUSTER_NAME
  - curl -L https://git.io/get_helm.sh | bash #install helm
  - helm init --service-account tiller --upgrade

jobs:
  include:
    - stage: "Build"
      name: "Build typescript files"
      script:
        - npm i -g typescript
        - npm i
        - npm run build:clean

    - stage: "Test"
      name: "Run unit tests and coverage"
      script: npm run coverage

    - stage: "Push"
      if: tag =~ ^v* OR tag =~^rc-*
      script:
        - set -e
        - gcloud auth configure-docker
        - docker build -t gcr.io/${PROJECT_NAME}/${DOCKER_IMAGE_BASENAME}:$TRAVIS_TAG .
        - docker push gcr.io/${PROJECT_NAME}/${DOCKER_IMAGE_BASENAME}:$TRAVIS_TAG
      name: "Build and push to GCR"

    - stage: "Push"
      if: branch != master AND branch != release AND NOT tag =~ ^v* AND NOT tag =~^rc-*
      script:
        - set -e
        - gcloud auth configure-docker
        - docker build -t gcr.io/${PROJECT_NAME}/${DOCKER_IMAGE_BASENAME}:alpha-$TRAVIS_COMMIT .
        - docker push gcr.io/${PROJECT_NAME}/${DOCKER_IMAGE_BASENAME}:alpha-$TRAVIS_COMMIT
        - gcloud container images add-tag gcr.io/${PROJECT_NAME}/${DOCKER_IMAGE_BASENAME}:alpha-$TRAVIS_COMMIT gcr.io/${PROJECT_NAME}/${DOCKER_IMAGE_BASENAME}:nightly
      name: "Tag nightly"

    - stage: "Tag"
      if: tag =~ ^v*
      script:
        - set -e
        - gcloud auth configure-docker
        - gcloud container images add-tag gcr.io/${PROJECT_NAME}/${DOCKER_IMAGE_BASENAME}:$TRAVIS_TAG gcr.io/${PROJECT_NAME}/${DOCKER_IMAGE_BASENAME}:latest
      name: "Tag latest"

    - stage: "Tag"
      if: tag =~ ^rc-*
      script:
        - set -e
        - gcloud auth configure-docker
        - gcloud container images add-tag gcr.io/${PROJECT_NAME}/${DOCKER_IMAGE_BASENAME}:$TRAVIS_TAG gcr.io/${PROJECT_NAME}/${DOCKER_IMAGE_BASENAME}:beta
      name: "Tag beta"

    - stage: "Deploy"
      name: "Deploy to K8S"
      if: tag =~ ^v* OR tag =~ ^rc-*
      deploy:
        - provider: script
          on:
            branch: master
            condition: $TRAVIS_TAG =~ ^v*
            tags: true
          script: export KUBE_NAMESPACE=production && ./scripts/deploy.sh

        - provider: script
          on:
            branch: release
            condition: $TRAVIS_TAG =~ ^rc-*
            tags: true
          env:
            - KUBE_NAMESPACE=staging
          script: export KUBE_NAMESPACE=staging && ./scripts/deploy.sh

notifications:
  email:
    recipients:
    - lucas@nindoo.ai
    on_success: never
    on_failure: always

